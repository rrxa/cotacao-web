import json
import unicodedata
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt

@csrf_exempt
def calcular_cotacao(request):
    if request.method == "POST":
        try:
            # ðŸ”¹ Decodifica corretamente o JSON garantindo UTF-8
            raw_data = request.body.decode("utf-8", errors="replace")
            data = json.loads(raw_data)

            # ðŸ”¹ Normaliza caracteres acentuados corretamente
            def normalize(text):
                if isinstance(text, str):
                    return unicodedata.normalize("NFKC", text)
                return text

            origem = normalize(data.get("origem", "").strip())
            destino = normalize(data.get("destino", "").strip())
            peso = data.get("peso")

            # ðŸ”¹ Verifica se os campos obrigatÃ³rios estÃ£o presentes
            if not origem or not destino or not peso:
                return JsonResponse({"erro": "Dados incompletos"}, status=400)

            # ðŸ”¹ Simula o cÃ¡lculo do preÃ§o
            resultado = {
                "origem": origem,
                "destino": destino,
                "preco": float(peso) * 10  # Exemplo de cÃ¡lculo
            }

            # ðŸ”¹ Retorna JSON garantindo UTF-8 e preservando caracteres especiais
            return JsonResponse(resultado, json_dumps_params={'ensure_ascii': False})

        except UnicodeDecodeError:
            return JsonResponse({"erro": "Erro de codificaÃ§Ã£o. Certifique-se de que os dados estÃ£o em UTF-8."}, status=400)
        except json.JSONDecodeError:
            return JsonResponse({"erro": "Erro ao processar JSON"}, status=400)
        except Exception as e:
            return JsonResponse({"erro": str(e)}, status=500)

    return JsonResponse({"erro": "MÃ©todo nÃ£o permitido"}, status=405)
